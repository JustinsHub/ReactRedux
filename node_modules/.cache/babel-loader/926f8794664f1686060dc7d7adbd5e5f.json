{"ast":null,"code":"var _jsxFileName = \"/Users/anyone/Desktop/Coding/SB Bootcamp/React/react-3/starwarsly/src/Planet.js\";\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { getPlanetFromAPI } from \"./actions/planets\";\nimport Sublist from \"./Sublist\";\n\nfunction Planet() {\n  const {\n    id\n  } = useParams();\n  const planet = useSelector(st => st.planets[id]);\n  const filmState = useSelector(st => st.films);\n  const characterState = useSelector(st => st.people);\n  const dispatch = useDispatch();\n  const missing = !planet; //initial API planet request when page is loaded based on params id. \n  //if there has been no request/id found yet, make one.\n\n  useEffect(function () {\n    if (missing) {\n      dispatch(getPlanetFromAPI(id));\n    }\n  }, [missing, id, dispatch]);\n  if (missing) return \"loading...\"; //all the planet/films/residents each have a relational value pair to access.\n  //access with films that relates to that planet based on it's relation.\n\n  const films = planet.films.map(fid => ({\n    id: fid,\n    url: `/films/${fid}`,\n    display: filmState[fid] ? filmState[fid].name : \"Unknown\"\n  })); //access with people that relates to that planet based on it's relation.\n\n  const residents = planet.residents.map(pid => ({\n    id: pid,\n    url: `/people/${pid}`,\n    display: characterState[pid] ? characterState[pid].name : \"Unknown\"\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"mt-3 mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, planet.name, /*#__PURE__*/React.createElement(\"small\", {\n    className: \"text-muted float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, id)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 10\n    }\n  }, \"Climate: \"), planet.climate), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 10\n    }\n  }, \"Population: \"), planet.population), /*#__PURE__*/React.createElement(Sublist, {\n    title: \"People\",\n    items: residents,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Sublist, {\n    title: \"Films\",\n    items: films,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Planet;","map":{"version":3,"sources":["/Users/anyone/Desktop/Coding/SB Bootcamp/React/react-3/starwarsly/src/Planet.js"],"names":["React","useEffect","useSelector","useDispatch","useParams","getPlanetFromAPI","Sublist","Planet","id","planet","st","planets","filmState","films","characterState","people","dispatch","missing","map","fid","url","display","name","residents","pid","climate","population"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAEA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAGA,SAASC,MAAT,GAAkB;AAChB,QAAM;AAACC,IAAAA;AAAD,MAAOJ,SAAS,EAAtB;AACA,QAAMK,MAAM,GAAGP,WAAW,CAACQ,EAAE,IAAIA,EAAE,CAACC,OAAH,CAAWH,EAAX,CAAP,CAA1B;AACA,QAAMI,SAAS,GAAGV,WAAW,CAACQ,EAAE,IAAIA,EAAE,CAACG,KAAV,CAA7B;AACA,QAAMC,cAAc,GAAGZ,WAAW,CAACQ,EAAE,IAAIA,EAAE,CAACK,MAAV,CAAlC;AACA,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAMc,OAAO,GAAG,CAACR,MAAjB,CANgB,CAShB;AACA;;AACAR,EAAAA,SAAS,CAAC,YAAW;AACnB,QAAIgB,OAAJ,EAAa;AACXD,MAAAA,QAAQ,CAACX,gBAAgB,CAACG,EAAD,CAAjB,CAAR;AACD;AACF,GAJQ,EAIN,CAACS,OAAD,EAAUT,EAAV,EAAcQ,QAAd,CAJM,CAAT;AAMA,MAAIC,OAAJ,EAAa,OAAO,YAAP,CAjBG,CAmBhB;AACA;;AACA,QAAMJ,KAAK,GAAGJ,MAAM,CAACI,KAAP,CAAaK,GAAb,CAAiBC,GAAG,KAAK;AACrCX,IAAAA,EAAE,EAAEW,GADiC;AAErCC,IAAAA,GAAG,EAAG,UAASD,GAAI,EAFkB;AAGrCE,IAAAA,OAAO,EAAET,SAAS,CAACO,GAAD,CAAT,GAAiBP,SAAS,CAACO,GAAD,CAAT,CAAeG,IAAhC,GAAuC;AAHX,GAAL,CAApB,CAAd,CArBgB,CA2BhB;;AACA,QAAMC,SAAS,GAAGd,MAAM,CAACc,SAAP,CAAiBL,GAAjB,CAAqBM,GAAG,KAAK;AAC7ChB,IAAAA,EAAE,EAAEgB,GADyC;AAE7CJ,IAAAA,GAAG,EAAG,WAAUI,GAAI,EAFyB;AAG7CH,IAAAA,OAAO,EAAEP,cAAc,CAACU,GAAD,CAAd,GAAsBV,cAAc,CAACU,GAAD,CAAd,CAAoBF,IAA1C,GAAiD;AAHb,GAAL,CAAxB,CAAlB;AAMA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGb,MAAM,CAACa,IADV,eAEE;AAAO,IAAA,SAAS,EAAC,wBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2Cd,EAA3C,CAFF,CADF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAH,EAAoBC,MAAM,CAACgB,OAA3B,CANF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAH,EAAuBhB,MAAM,CAACiB,UAA9B,CAPF,eASE,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAC,QAAf;AAAwB,IAAA,KAAK,EAAEH,SAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,eAUE,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAC,OAAf;AAAuB,IAAA,KAAK,EAAEV,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CADF;AAcD;;AAED,eAAeN,MAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\n\nimport { getPlanetFromAPI } from \"./actions/planets\";\nimport Sublist from \"./Sublist\";\n\n\nfunction Planet() {\n  const {id} = useParams();\n  const planet = useSelector(st => st.planets[id]);\n  const filmState = useSelector(st => st.films);\n  const characterState = useSelector(st => st.people);\n  const dispatch = useDispatch();\n  const missing = !planet;\n\n\n  //initial API planet request when page is loaded based on params id. \n  //if there has been no request/id found yet, make one.\n  useEffect(function() {\n    if (missing) {\n      dispatch(getPlanetFromAPI(id));\n    }\n  }, [missing, id, dispatch]);\n\n  if (missing) return \"loading...\";\n\n  //all the planet/films/residents each have a relational value pair to access.\n  //access with films that relates to that planet based on it's relation.\n  const films = planet.films.map(fid => ({\n    id: fid,\n    url: `/films/${fid}`,\n    display: filmState[fid] ? filmState[fid].name : \"Unknown\"\n  }));\n\n  //access with people that relates to that planet based on it's relation.\n  const residents = planet.residents.map(pid => ({\n    id: pid,\n    url: `/people/${pid}`,\n    display: characterState[pid] ? characterState[pid].name : \"Unknown\"\n  }));\n\n  return (\n    <div>\n      <h1 className=\"mt-3 mb-3\">\n        {planet.name}\n        <small className=\"text-muted float-right\">{id}</small>\n      </h1>\n\n      <p><b>Climate: </b>{planet.climate}</p>\n      <p><b>Population: </b>{planet.population}</p>\n\n      <Sublist title=\"People\" items={residents} />\n      <Sublist title=\"Films\" items={films} />\n    </div>\n  );\n}\n\nexport default Planet;\n"]},"metadata":{},"sourceType":"module"}